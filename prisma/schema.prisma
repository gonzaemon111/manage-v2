// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid()) // ユーザーID
  name          String // ユーザー名
  email         String         @unique // メールアドレス
  emailVerified DateTime? // メール検証
  image         String? // 画像
  accounts      Account[] // アカウント
  sessions      Session[] // セッション
  Domain        Domain[] // ドメイン
  Subscription  Subscription[] // サブスク
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Domain {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String  @map("user_id")
  name          String
  isCanceled    Boolean @default(false)
  memo          String? @db.LongText()
  nextUpdatedAt String?
  provider      String
  accountName   String

  @@index([userId])
}

model Subscription {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @map("user_id")
  name       String
  memo       String?   @db.LongText()
  startedAt  DateTime?
  finishedAt DateTime?
  imageURL   String?
  price      Int
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([userId])
}
